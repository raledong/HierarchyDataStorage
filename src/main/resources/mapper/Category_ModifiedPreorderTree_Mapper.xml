<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.deerowl.modified_preorder_tree.CategoryNodeMapper">
    <resultMap id="BaseResultMap" type="cn.deerowl.modified_preorder_tree.CategoryNode" >
        <id column="category_id" property="id" javaType="int" jdbcType="INTEGER" />
        <result column="name" property="name" javaType="string" jdbcType="VARCHAR" />
        <result column="lft" property="lft" javaType="int" jdbcType="INTEGER"/>
        <result column="rgt" property="rgt" javaType="int" jdbcType="INTEGER" />
    </resultMap>

    <select id="findById" parameterType="int" resultMap="BaseResultMap">
        select * from nested_category
        where category_id = #{id}
    </select>

    <select id="getAll" resultMap="BaseResultMap" >
        select * FROM nested_category
    </select>

    <select id="getRoots" resultMap="BaseResultMap">
        SELECT * FROM nested_category c1
        WHERE c1.category_id
        NOT IN (
        SELECT DISTINCT c2.category_id
        FROM nested_category c2,
        nested_category c3
        WHERE c2.lft > c3.lft AND c3.rgt > c2.rgt)
    </select>

    <select id="getSubCategoryNodesIncludingSelf" resultMap="BaseResultMap">
        SELECT c1.* FROM nested_category c1, nested_category c2
        WHERE c1.lft >= c2.lft
              AND c2.rgt >= c1.rgt
              AND c2.category_id = #{id}
        ORDER BY c1.lft ASC
    </select>

    <select id="addCategoryTo" statementType="CALLABLE" resultType="INT">
        CALL addCategory(#{name, mode=IN}, #{parentId, mode=IN}, #{id, javaType=INT, jdbcType=INTEGER, mode=OUT })
    </select>

    <update id="deleteCategory" parameterType="INT">
        CALL delCategory(#{categoryId, mode=IN})
    </update>

    <select id="getMaxRightValue" resultType="INT">
        SELECT MAX(rgt) FROM nested_category;
    </select>

    <insert id="addCategories" parameterType="List" >
        INSERT INTO nested_category(name, lft, rgt) VALUES
        <foreach collection="list" item="element" index="index" open="(" separator="),("  close=")" >
            #{element.name}, #{element.lft}, #{element.rgt}
        </foreach>
    </insert>
</mapper>